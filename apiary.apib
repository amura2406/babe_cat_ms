FORMAT: 1A
HOST: http://localhost:9000/category/v1

# BABE Category Microservice

Category Microservice main goal is to categorize content using TF-IDF method.
 
It should encapsulates all underlying storage & cache and provide convenient interface for content client.

# Group Category

## Category Classification [/classify/{artId}]

+ Parameters
    + artId (number, required) - Article ID

### Classify by Article ID [POST]

Classify / categorize an article's body using TF-IDF.

**NB:**

- If `artId` is not found, simply return **HTTP 404**.
 
+ Request (application/json)
    + Attributes (CatClassificationRequest)
    
+ Response 200 (application/json)
    + Attributes (CatClassificationResponse) 
        
+ Response 404 (application/json)
    Return when `artId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)


### Classify by Content [POST /classify]

Classify / categorize a string content using TF-IDF.
 
+ Request (application/json)
    + Attributes (CatClassificationRequest)
        + body: `Lorem Ipsum ...` (string, required) - The body of the article.
        + summary: `Lorem ipsum ...` (string, required) - Summary of the article/video.
        + title: `Lorem Ipsum ...` (string, required) - Title of the article/video
        + sourceId: `8` (number, required) - Source ID
        + playlistId: `123` (number) - Playlist ID of the video (optional).        
 
+ Response 200 (application/json)
    + Attributes (CatClassificationResponse)

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    

## Category Classification Keyword [/keyword]

### Insert or Update Keyword [POST]
Insert new or update existing TF-IDF keywords. Leave keywordId empty for insert, fill it for update.

+ Request (application/json)
    + Attributes (KeywordRequestUpsert)

+ Response 200 (application/json)
    + Attributes (KeywordResponse)

### Delete Keyword [DELETE]
Delete existing TF-IDF keywords.

+ Request (application/json)
    + Attributes (KeywordRequestDelete)

+ Response 200 (application/json)
    + Attributes (KeywordResponse)
    
### List Keywords [POST /keyword/list]
List existing keywords
+ Request (application/json)
    + Attributes (KeywordGetRequest)

+ Response 200 (application/json)
    + Attributes (KeywordGetResponse)


## Category Detail [/detail/{catId}]
+ Parameters
    + catId: 9 (number, optional) - Category Id

### Get Category Detail [GET]

Get all active categories as an array from DB (`sasha_category` ).

+ Response 200 (application/json)
    + Attributes 
        + cat (Category, required)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Category Retrieval [/list{?off}{?lim}{?type}{?contentType}{?appId}{?catId}]
+ Parameters
    + off: 0 (number, optional) - Page Number (default = 0)
    + lim: 10 (number, optional) - Item Number (default = 10)
    + appId: 1 (number, optional) - App Id (1 = babe, 2 = durian)
    + contentType: 1 (number, optional) - Category Content Type ( 1 = article, 2 = video)
    + catId: 9 (number, optional) - Category Id 
    + type: 10 (number, optional) - Category Type (default = 10)
    
### Get Categories List [GET]

Get all active categories as an array from DB (`sasha_category` ).
 
+ Response 200 (application/json)
    + Attributes 
        + cats (array[Category], required) 
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Category Upsert [/upsert]

### Upsert Category [PATCH]

Activate category in DB.

+ Request (application/json)
    + Attributes (Category)
    
+ Response 200
    + Attributes (number)
    
+ Response 404 (application/json)
    Return when `catId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Category Alteration [/{catId}/active]

### Activate Category [PUT]

Activate category in DB.

+ Parameters
    + catId (number, required) - Category ID

+ Response 204
    
+ Response 404 (application/json)
    Return when `catId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Deactivate Category [DELETE]

Deactivate category in DB.

+ Parameters
    + catId (number, required) - Category ID

+ Response 204
    
+ Response 404 (application/json)
    Return when `catId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)



# Data Structures

## CatClassificationRequest (object)
+ max: `5` (number, optional) - Number of classification returned, default to 1.

## ClassificationCategory (object)
+ catId: `1116` (number, required) - Category ID.
+ score: `0.51` (number, required) - Category Score
+ entities: katingan, bupati katingan (array[string])


## KeywordRequestUpsert (object)
+ clusters (array[ClusterKeywordFull])

## KeywordRequestDelete (object)
+ clusters (array[ClusterKeywordIdOnly])

## ClusterKeywordFull (object)
+ clusterId: `1` (number, required) - Cluster ID (TFIFDCategory, toutiao-128, etc.)
+ keywords (array[CategoryKeywordFull])

## ClusterKeywordIdOnly (object)
+ clusterId: `1` (number, required) - Cluster ID (TFIFDCategory, toutiao-128, etc.)
+ keywords (array[CategoryKeywordIdOnly])

## CategoryKeywordFull (object)
+ keywordId: `1` (number, optional) - Keyword ID, fill for update, leave empty for insert
+ categoryId: `4` (number, required)
+ keyword: `nikita mirzani` (string, required)
+ weight: `1.5` (number, required)

## CategoryKeywordIdOnly (object)
+ keywordId: `1` (number, required) - Keyword ID

## KeywordResponse (object)
+ results (array[KeywordResult])

## KeywordResult (object)
+ cluster: `TFIDFCategory` (string) - Cluster name
+ updated: `1` (number) - number of keywrods inserted, updated or deleted


## KeywordGetRequest (object)
+ clusters (array[KeywordGetRequestCluster])

## KeywordGetRequestCluster (object)
+ clusterId: `3` (number) - ID of the cluster
+ categoryIds: `4`,`8` (array[number]) - Category IDs


## KeywordGetResponse (object)
+ clusters (array[KeywordGetResponseCluster])

## KeywordGetResponseCluster (object)
+ clusterId: `1` (number)
+ categories (array[KeywordGetResponseCategory])

## KeywordGetResponseCategory (object)
+ categoryId: `1` (number)
+ keywords (array[KeywordGetResponseKeyword])

## KeywordGetResponseKeyword (object)
+ keywordId: `1` (number)
+ keyword: `nikita mirzani` (string)
+ weight: `3.0` (number)


## CatClassificationResponse (object)
+ categories: ClassificationCategory (array[ClassificationCategory]) - Categorization result
+ sourceRank: `1` (number) - Source ranking

## Category (object)
+ catId: `3` (number, required) - Category ID.
+ name: `Hiburan` (string, required) - Category Name.
+ nameEnglish: `Entertainment` (string, required) - English Category Name.
+ icon: `Icon` (string, required) - Category Icon.
+ isParent: 0 (number, required) - Category Status Parent.
+ parentId: 0 (number, required) - Category Parent Id.
+ enabled: 0 (number, required) - Category Status.
+ type: 20 (number, required) - Category Type.
+ priority: 1 (number, required) - Category Priority.
+ timeThreshold: 1 (number, required) - Category Time Threshold.
+ articleThreshold: 1 (number, required) - Category Article Threshold.
+ isStatic: 1 (number, required) - Category Static Status.
+ notifEnabled: 0 (number, required) - Category Status Notif.
+ headerColor: `Priority` (string, required) - Category Header Color.
+ appCategoryId  (array[AppCategoryId]) - Category Mapping 
+ tags:  `tags1`, `tags2` (array[string]) - Category Mapping

## AppCategoryId (object)
+ appId: `3` (number, required) - Category ID.
+ contentTyoe: `2` (number, required) - Category ID.

## Error (object)
+ errCode (number) - Error Code
+ errMsg (string) - Error Message

## DefaultError400 (Error)
+ errCode: `-1`
+ errMsg: Invalid Request

## DefaultError401 (Error)
+ errCode: `-2`
+ errMsg: Authorization needed to access resource

## DefaultError404 (Error)
+ errCode: `-5`
+ errMsg: Resource not found

## DefaultError413 (Error)
+ errCode: `-14`
+ errMsg: Request Entity Too Large

## DefaultError503 (Error)
+ errCode: `-10`
+ errMsg: Backend service is down