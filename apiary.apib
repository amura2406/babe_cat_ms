FORMAT: 1A
HOST: http://localhost:9000/category/v1

# BABE Category Microservice

Category Microservice main goal is to categorize content using TF-IDF method.
 
It should encapsulates all underlying storage & cache and provide convenient interface for content client.

# Group Category

## Category Classification [/classify/{artId}]

+ Parameters
    + artId (number, required) - Article ID

### Classify by Article ID [POST]

Classify / categorize an article's body using TF-IDF.

**NB:**

- If `artId` is not found, simply return **HTTP 404**.
 
+ Request (application/json)
    + Attributes (CatClassificationRequest)
    
+ Response 200 (application/json)
    + Attributes (CatClassificationResponse) 
        
+ Response 404 (application/json)
    Return when `artId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)


### Classify by Content [POST /classify]

Classify / categorize a string content using TF-IDF.
 
+ Request (application/json)
    + Attributes (CatClassificationRequest)
        + body: `Lorem Ipsum ...` (string, required) - The body of the article.
        + summary: `Lorem ipsum ...` (string, required) - Summary of the article/video.
        + title: `Lorem Ipsum ...` (string, required) - Title of the article/video
        + sourceId: `8` (number, required) - Source ID
        + playlistId: `123` (number) - Playlist ID of the video (optional).        
 
+ Response 200 (application/json)
    + Attributes (CatClassificationResponse)

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Category Retrieval [/list]

### Get Categories List [GET]

Get all active categories as an array from DB (`sasha_category`).
 
+ Response 200 (application/json)
    + Attributes (array[Category])
    
    + Body
            
            [
              {
                "id": 3,
                "name": "Terbaru"
              },
              {
                "id": 101,
                "name": "DKI Jakarta"
              }
            ]
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Category Alteration [/{catId}/active]

### Activate Category [PUT]

Activate category in DB.

+ Parameters
    + catId (number, required) - Category ID

+ Response 204
    
+ Response 404 (application/json)
    Return when `catId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Deactivate Category [DELETE]

Deactivate category in DB.

+ Parameters
    + catId (number, required) - Category ID

+ Response 204
    
+ Response 404 (application/json)
    Return when `catId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)



# Data Structures

## CatClassificationRequest (object)
+ max: `5` (number, optional) - Number of classification returned, default to 1.

## ClassificationCategory (object)
+ catId: `1116` (number, required) - Category ID.
+ score: `0.51` (number, required) - Category Score
+ entities: katingan, bupati katingan (array[string])

## CatClassificationResponse (object)
+ categories: ClassificationCategory (array[ClassificationCategory]) - Categorization result
+ sourceRank: `1` (number) - Source ranking

## Category (object)
+ id: `3` (number, required) - Category ID.
+ name: `Terbaru` (string, required) - Category Name.

## Error (object)
+ errCode (number) - Error Code
+ errMsg (string) - Error Message

## DefaultError400 (Error)
+ errCode: `-1`
+ errMsg: Invalid Request

## DefaultError401 (Error)
+ errCode: `-2`
+ errMsg: Authorization needed to access resource

## DefaultError404 (Error)
+ errCode: `-5`
+ errMsg: Resource not found

## DefaultError413 (Error)
+ errCode: `-14`
+ errMsg: Request Entity Too Large

## DefaultError503 (Error)
+ errCode: `-10`
+ errMsg: Backend service is down